
#pragma kernel ComputePosition
#include "Utils.cginc"


RWTexture2D <float4> _texture;
RWTexture2D <float4> _height;
RWStructuredBuffer<float2> _positionsBuffer;
RWStructuredBuffer<float2> _positionsPerTreeBuffer;
RWStructuredBuffer<int> _positionsPerTreeIndexBuffer;

RWStructuredBuffer<QuadTreeInfo> _qti;


float GetHeight(float2 pos)
{
	return _height[pos.xy].x;
}

float GetSlope(float2 pos)
{
	return .7;
}

float GetHumidity(float2 pos)
{
	return .7;
}


float EvaluateCurves(float2 pos, float2 atlasUV, int i)
{
	int nInfo = 80;
	int arrayOffset = i * nInfo;
	float atlasInfo = _texture[atlasUV].x;

	int currentIndexHeight		= nInfo * GetHeight(pos);
	int currentIndexHumidity	= nInfo * GetHumidity(pos);
	int currentIndexSlope		= nInfo * GetSlope(pos);
	int currentIndexSensitive	= nInfo * atlasInfo;
	int currentIndexNecessity	= nInfo * atlasInfo;

	float height	= _GlobalTreeHeightInfo[arrayOffset + currentIndexHeight];
	float humidity	= _GlobalTreeHumidityInfo[arrayOffset + currentIndexHeight];
	float slope		= _GlobalTreeSlopeInfo[arrayOffset + currentIndexHeight];
	float sensitive = _GlobalTreeSensitiveInfo[arrayOffset + currentIndexHeight];
	float necessity = _GlobalTreeNecessityInfo[arrayOffset + currentIndexHeight];

	float curves = height;
	
	return curves;
}


int EvaluatePosition(float2 wPos)
{
	//upper atlas info
	float2 uv = WorldPosition2AtlasInfoUpperLevelUV(_qti[0], wPos);
	float4 upperLevelInfo = _texture[uv];

	float hasInfo = upperLevelInfo.x;

	if(hasInfo > 0.01 && _qti[0].vegLevel > 1)	return INFINITY;
	
	int r = _qti[0].vegLevel * 3 - 1;

	if( _qti[0].vegLevel == 1)
	{
		r = CustomRand(wPos, 0, 2);
	}
	else if( _qti[0].vegLevel == 2)
	{
		r = CustomRand(wPos, 2, 4);
	}
	else if( _qti[0].vegLevel == 3)
	{
		r = CustomRand(wPos, 4, 6);
	}

	//if(EvaluateCurves(wPos, uv, r) < 0.8)	return INFINITY;

	int currentIndex = _positionsPerTreeIndexBuffer[r];

	_positionsPerTreeBuffer[r * _GlobalBufferPerTreeSize + currentIndex] = wPos;

	_positionsPerTreeIndexBuffer[r] ++;
	
	return 1;
}






[numthreads(1,1,1)]
void ComputePosition (uint3 id : SV_DispatchThreadID)
{
	for(int i = 0; i < BLOCK_SIZE; i++)
	{
		_positionsBuffer[i] = NormalizedPos2ScaledWorldPos(	_GlobalPrecomputedPositionL1[i], 
															_qti[0].currentNodeWorldOrigin, 
															_qti[0].currentNodeWorldSize);
		
		_positionsBuffer[i] *= EvaluatePosition(_positionsBuffer[i]);
	}
}


