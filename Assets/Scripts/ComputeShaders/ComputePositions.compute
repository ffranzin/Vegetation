
#pragma kernel ComputePosition
#pragma kernel AdjustIniPos
#pragma kernel UpdatePosCounter
#include "Utils.cginc"


RWTexture2D <float4> _texture;
RWStructuredBuffer<float2> _positionsBuffer;
RWStructuredBuffer<int> _globalTreeCountPositionsBuffer;

RWTexture2D <float2> _positionsTexture;

RWStructuredBuffer<QuadTreeInfo> _qti;

//Store initial position and  amount of positions per node in NodePool 
RWStructuredBuffer<float2> _globalPosTreeIniSizeBuffer;

int _globalMaxPositionBufferSize;
int _myIdInNodePool;
int _globalNodePoolSize;
int _globalTreePoolSize;
int _globalCurvesDiscretizedBlockSize;
float _globalTerrainSize;




Texture2D<float> TexHeight;
Texture2D<float> TexWater;
RWTexture2D<float> TexMoisture;
RWTexture2D<float> TexSlope;

float GetHeight(float2 pos)
{
	return TexHeight[pos].x;
}


float GetObstacles(float2 pos)
{
	return 1 - TexWater[pos].x;
}


float GetSlope(float2 pos)
{
	return TexSlope[pos].x;
}


float GetMoisture(float2 pos)
{
	return TexMoisture[pos].x;
}



float EvaluateCurves(float2 pos, float2 pos01, float upperLevelInfo, int indexInTreePool, int vegLevel)
{
	int arrayOffset = indexInTreePool * _globalCurvesDiscretizedBlockSize;
	
	// pos = WorldCoord2TexCoord(pos);

	//if (vegLevel == 1) pos01 = pos01 * 1024;
	//if(vegLevel == 2) pos01 = pos01 * 512;
	 //if (vegLevel == 3) pos01 = pos01 * 256;
	pos01 = pos01 * 1024;

	int currentIndexHeight		= _globalCurvesDiscretizedBlockSize * GetHeight(pos);
	int currentIndexHumidity	= _globalCurvesDiscretizedBlockSize * GetMoisture(pos01);
	int currentIndexSlope		= _globalCurvesDiscretizedBlockSize * Remap(GetSlope(pos01), 0, 0.4, 0, 1);
	int currentIndexSensitive	= _globalCurvesDiscretizedBlockSize * upperLevelInfo;

	float height		= 1 - _globalTreeHeightInfo[arrayOffset + currentIndexHeight];
	float moisture		= 1 - _globalTreeHumidityInfo[arrayOffset + currentIndexHumidity];
	float slope			= _globalTreeSlopeInfo[arrayOffset + currentIndexSlope];
	float sensitive		= vegLevel == 1 ? 1 : _globalTreeSensitiveInfo[arrayOffset + currentIndexSensitive];


	height = height < frac(pos01.x) ? 1 : 0; 
	moisture = moisture < frac(pos01.x) ? 1 : 0;
	slope = slope < frac(pos01.x) ? 1 : 0;
	
	moisture = GetMoisture(pos01) > 0.7 ? 1 : 0;

	height = GetHeight(pos) > 0.7 ? 1 : 0;



	float curves = height;//sensitive * GetObstacles(pos);//moisture;//height * GetObstacles(pos);  
	
	return curves;
}


void SetSize(int tree)
{
	tree = _globalTreePoolSize * _myIdInNodePool + tree;
	_globalPosTreeIniSizeBuffer[tree].y ++;
}


int EvaluatePosition(float2 wPos, float2 pos01)
{
	//upper atlas info
	float radius = 3;
	float2 uv0 = WorldPosition2AtlasInfoUpperLevelUV(_qti[0], wPos);
	float2 uv1 = WorldPosition2AtlasInfoUpperLevelUV(_qti[0], wPos + float2(radius, radius));
	float2 uv2 = WorldPosition2AtlasInfoUpperLevelUV(_qti[0], wPos + float2(-radius, radius));
	float2 uv3 = WorldPosition2AtlasInfoUpperLevelUV(_qti[0], wPos + float2(radius, -radius));
	float2 uv4 = WorldPosition2AtlasInfoUpperLevelUV(_qti[0], wPos + float2(-radius, -radius));

	float upperLevelInfo = 0; _texture[uv0].r + _texture[uv1].r + _texture[uv2].r + _texture[uv3].r + _texture[uv4].r;

	//float2 uv = WorldPosition2AtlasInfoUpperLevelUV(_qti[0], wPos);
	//float upperLevelInfo = _texture[uv].r;

	//if(_qti[0].vegLevel > 1 && upperLevelInfo/5 > 0.15)	return 0;

	//if(_qti[0].vegLevel == 1 && wPos.x > 500)	return 0;


	int r = _qti[0].vegLevel - 1;
	

	if (_qti[0].vegLevel == 1)
	{
		r = CustomRand(wPos, 0, 2);
	}
	else if (_qti[0].vegLevel == 2)
	{
		r = CustomRand(wPos, 2, 4);
	}
	else if (_qti[0].vegLevel == 3)
	{
		r = CustomRand(wPos, 4, 6);
	}
	int currentIndex = _globalTreeCountPositionsBuffer[r];

	if(currentIndex > _globalMaxPositionBufferSize)	return 0;

	//if(EvaluateCurves(wPos, pos01, upperLevelInfo, r, _qti[0].vegLevel) > frac(wPos.x))
	if(EvaluateCurves(wPos, pos01, upperLevelInfo, r, _qti[0].vegLevel) == 0)
		return 0;

	_globalTreeCountPositionsBuffer[r]++;
	
	_positionsTexture[float2(currentIndex, r)] = float2(wPos.x, wPos.y);

	SetSize(r);

	return 1;
}




















































void SetAllIniSize()
{
	int iOffset = _globalTreePoolSize * _myIdInNodePool;

	for(int i = 0; i<_globalTreePoolSize; i++)
	{
		_globalPosTreeIniSizeBuffer[iOffset + i].x = _globalTreeCountPositionsBuffer[i];
		_globalPosTreeIniSizeBuffer[iOffset + i].y = 0;
	}
}




[numthreads(1,1,1)]
void ComputePosition (uint3 id : SV_DispatchThreadID)
{
	SetAllIniSize(); 
	/////arrumar _global pre computed L1 
	for(int i = 0; i < BLOCK_SIZE; i++)
	{
		_positionsBuffer[i] = NormalizedPos2ScaledWorldPos(	_GlobalPrecomputedPositionL1[i], 
															_qti[0].currentNodeWorldOrigin, 
															_qti[0].currentNodeWorldSize);
		
		_positionsBuffer[i] *= EvaluatePosition(_positionsBuffer[i], _GlobalPrecomputedPositionL1[i]);
	}
}






[numthreads(500,1,1)]
void AdjustIniPos(uint3 id : SV_DispatchThreadID)
{
	int NUM_THREAD = 500;

	int init = id.x * (_globalNodePoolSize / NUM_THREAD);
	int size = init + (_globalNodePoolSize / NUM_THREAD);

	int delOffset = _myIdInNodePool * _globalTreePoolSize;

	for(int i = init; i < size; i++)
	{
		for(int j = 0; j < _globalTreePoolSize; j++)
		{
			int delBlockIni		= _globalPosTreeIniSizeBuffer[delOffset + j].x;
			int updateBlockIni	= _globalPosTreeIniSizeBuffer[i * _globalTreePoolSize + j].x;

			if(delBlockIni < updateBlockIni)
			{
				_globalPosTreeIniSizeBuffer[i * _globalTreePoolSize + j].x -= _globalPosTreeIniSizeBuffer[delOffset + j].y;
			}
		}
	}
}



[numthreads(1,1,1)]
void UpdatePosCounter()
{
	for(int i = 0; i < _globalTreePoolSize; i++)
	{
		_globalTreeCountPositionsBuffer[i] -= 
		_globalPosTreeIniSizeBuffer[_myIdInNodePool * _globalTreePoolSize + i].y;

		_globalPosTreeIniSizeBuffer[_myIdInNodePool * _globalTreePoolSize + i].y = 0;

	}
}







/*
	float hasInfo = upperLevelInfo.x;

	if(hasInfo > 0.01 && _qti[0].vegLevel > 1)	return INFINITY;
	
	int r = 0 ;//_qti[0].vegLevel * 3 - 1;
	
	if( _qti[0].vegLevel == 1)
	{
		r = CustomRand(wPos, 0, 2);
	}
	else if( _qti[0].vegLevel == 2)
	{
		r = CustomRand(wPos, 2, 4);
	}
	else if( _qti[0].vegLevel == 3)
	{
		r = CustomRand(wPos, 4, 6);
	}
	*/
	//if(EvaluateCurves(wPos, uv, r) < 0.8)	return INFINITY;
