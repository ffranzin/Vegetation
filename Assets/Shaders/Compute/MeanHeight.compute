#pragma kernel FirstPass
#pragma kernel SecondPass

#include "HumidityUtils.cginc"

[numthreads(GROUP_SIZE, GROUP_SIZE, 1)]
void FirstPass(uint3 id : SV_DispatchThreadID)
{
	TexVPass[id.xy] = 0.0;
	TexHPass[id.xy] = 0.0;

	//float dst = float(Distance);
	//float accum = 0.0;

	for (int k = 0; k <= Distance; k++)
	{
		//float w = 1.0 - (float(k) / dst);
		//accum += 2.0 * w;

		TexVPass[id.xy] += TexHeight[GetIndex(Pos.xy, Pos.zw, id.xy, int2(0, -k))];// *w;
		TexVPass[id.xy] += TexHeight[GetIndex(Pos.xy, Pos.zw, id.xy, int2(0, k))];// *w;

		TexHPass[id.xy] += TexHeight[GetIndex(Pos.xy, Pos.zw, id.xy, int2(-k, 0))];// *w;
		TexHPass[id.xy] += TexHeight[GetIndex(Pos.xy, Pos.zw, id.xy, int2(k, 0))];// *w;
	}

	TexVPass[id.xy] /= (Distance * 2.0); // accum;
	TexHPass[id.xy] /= (Distance * 2.0); // accum;
}

[numthreads(GROUP_SIZE, GROUP_SIZE, 1)]
void SecondPass(uint3 id : SV_DispatchThreadID)
{
	const int2 _zero = int2(0, 0);
	const int2 _size = int2(SPLAT_SIZE, SPLAT_SIZE);

	TexMeanH[id.xy] = 0.0;

	//float dst = float(Distance);
	//float accum = 0.0;

	for (int k = 0; k <= Distance; k++)
	{
		//float w = 1.0 - (float(k) / dst);
		//accum += 4.0 * w;

		TexMeanH[id.xy] += (
			TexVPass[GetIndex(_zero, _size, id.xy, int2(-k, 0))] +
			TexHPass[GetIndex(_zero, _size, id.xy, int2(0, -k))]
			);// *w;
		TexMeanH[id.xy] += (
			TexVPass[GetIndex(_zero, _size, id.xy, int2(0, k))] +
			TexHPass[GetIndex(_zero, _size, id.xy, int2(k, 0))]
			);// *w;
	}

	TexMeanH[id.xy] /= (Distance * 4.0); //accum;

	//TexMeanH[id.xy] = TexVPass[id.xy] + TexHPass[id.xy];
}