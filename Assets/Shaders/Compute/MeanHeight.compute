#pragma kernel FirstPass
#pragma kernel SecondPass

#include "MoistureUtils.cginc"

[numthreads(GROUP_SIZE, GROUP_SIZE, 1)]
void FirstPass(uint3 id : SV_DispatchThreadID)
{
	TexVPass[id.xy] = 0.0;
	TexHPass[id.xy] = 0.0;

	//float dst = float(Distance);
	//float accum = 0.0;

	for (int k = 0; k <= int(Params[0].d_meanHeight); k++)
	{
		//float w = 1.0 - (float(k) / dst);
		//accum += 2.0 * w;

		TexVPass[id.xy] += TexHeight[GetIndex(Pos.xy, Params[0].s_atlas, id.xy, float2(0.0, -k))];// *w;
		TexVPass[id.xy] += TexHeight[GetIndex(Pos.xy, Params[0].s_atlas, id.xy, float2(0.0, k))];// *w;

		TexHPass[id.xy] += TexHeight[GetIndex(Pos.xy, Params[0].s_atlas, id.xy, float2(-k, 0.0))];// *w;
		TexHPass[id.xy] += TexHeight[GetIndex(Pos.xy, Params[0].s_atlas, id.xy, float2(k, 0.0))];// *w;
	}

	TexVPass[id.xy] /= (Params[0].d_meanHeight * 2.0); // accum;
	TexHPass[id.xy] /= (Params[0].d_meanHeight * 2.0); // accum;
}

[numthreads(GROUP_SIZE, GROUP_SIZE, 1)]
void SecondPass(uint3 id : SV_DispatchThreadID)
{
	const float2 _zero = float2(0, 0);

	TexMeanH[id.xy] = 0.0;

	for (int k = 0; k <= int(Params[0].d_meanHeight); k++)
	{
		TexMeanH[id.xy] += (
			TexVPass[GetIndex(_zero, Params[0].s_splat, id.xy, float2(-k, 0.0))] +
			TexHPass[GetIndex(_zero, Params[0].s_splat, id.xy, float2(0.0, -k))]
			);
		TexMeanH[id.xy] += (
			TexVPass[GetIndex(_zero, Params[0].s_splat, id.xy, float2(0.0, k))] +
			TexHPass[GetIndex(_zero, Params[0].s_splat, id.xy, float2(k, 0.0))]
			);
	}

	TexMeanH[id.xy] /= (Params[0].d_meanHeight * 4.0);
}