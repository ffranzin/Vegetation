#pragma kernel FirstPass
#pragma kernel SecondPass

#include "MoistureUtils.cginc"

[numthreads(GROUP_SIZE, GROUP_SIZE, 1)]
void FirstPass(uint3 id : SV_DispatchThreadID)
{
	TexVPass[id.xy] = 0.0;
	TexHPass[id.xy] = 0.0;

	float dst = Params[0].d_waterSpread + 1.0;
	float accum = 0.0;

	for (int k = 0; k <= int(Params[0].d_waterSpread); k++)
	{
		float w = 1.0 - (float(k) / dst);
		accum += 2.0 * w;

		TexVPass[id.xy] += (
			TexWater[GetIndex(Pos, Params[0].s_atlas, id.xy, float2(0.0, -k))] +
			TexWater[GetIndex(Pos, Params[0].s_atlas, id.xy, float2(0.0, k))]) * w;

		TexHPass[id.xy] += (
			TexWater[GetIndex(Pos, Params[0].s_atlas, id.xy, float2(-k, 0.0))] +
			TexWater[GetIndex(Pos, Params[0].s_atlas, id.xy, float2(k, 0.0))]) * w;
	}

	TexVPass[id.xy] /= accum;
	TexHPass[id.xy] /= accum;
}

[numthreads(GROUP_SIZE, GROUP_SIZE, 1)]
void SecondPass(uint3 id : SV_DispatchThreadID)
{
	const float2 _zero = float2(0, 0);

	TexWSpread[id.xy] = 0.0;

	float dst = Params[0].d_waterSpread + 1.0;
	float accum = 0.0;

	for (int k = 0; k <= int(Params[0].d_waterSpread); k++)
	{
		float w = 1.0 - (float(k) / dst);
		accum += 2.0 * w;

		TexWSpread[id.xy] += (
			TexVPass[GetIndex(_zero, Params[0].s_splat, id.xy, float2(-k, 0.0))] +
			TexHPass[GetIndex(_zero, Params[0].s_splat, id.xy, float2(0.0, -k))]) * w;
		TexWSpread[id.xy] += (
			TexVPass[GetIndex(_zero, Params[0].s_splat, id.xy, float2(k, 0.0))] +
			TexHPass[GetIndex(_zero, Params[0].s_splat, id.xy, float2(0.0, k))]) * w;
	}

	TexWSpread[id.xy] /= accum;
	TexWSpread[id.xy] += TexWater[GetIndex(Pos, Params[0].s_atlas, id.xy, _zero)];
}
